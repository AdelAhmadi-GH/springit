// User.java
package com.adelahmadi.springit.domain;

import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * User entity implementing Spring Security's UserDetails.
 * We use email as the authentication username (principal).
 * Roles are stored as simple strings via ElementCollection (String-based
 * model).
 */
@Getter
@Setter
@NoArgsConstructor
@RequiredArgsConstructor
@ToString(exclude = { "password", "roles" }) // Avoid logging sensitive fields
@Entity
@Table(name = "users")
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    // Email is used as the username for authentication
    @NonNull
    @Email(message = "Email must be valid")
    @Size(min = 8, max = 50, message = "Email must be between 8 and 50 characters")
    @Column(nullable = false, unique = true, length = 50)
    private String email;

    @NonNull
    @Column(length = 100, nullable = false)
    private String password;

    @Column(nullable = false)
    private boolean enabled = true;

    // String-based roles; stored in a separate collection table
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"))
    @Column(name = "role", nullable = false, length = 32)
    private Set<String> roles = new HashSet<>();

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        // Map logical roles to authorities with ROLE_ prefix
        return roles.stream()
                .map(r -> r.startsWith("ROLE_") ? r : "ROLE_" + r)
                .map(org.springframework.security.core.authority.SimpleGrantedAuthority::new)
                .collect(Collectors.toUnmodifiableSet());
    }

    @Override
    public String getUsername() {
        // Email is the username for authentication
        return email;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    // addRole methods to manage user roles
    public void addRole(Role userRole) {
        roles.add(userRole.getName());
    }

    // addRoles method to add multiple roles at once
    public void addRoles(Set<Role> roles) {
        // Add multiple roles at once
        roles.forEach(this::addRole);
    }

    // getPassword() is generated by Lombok via @Getter on 'password'
    // Other flags (account non-expired/locked, credentials non-expired) use
    // UserDetails defaults (true)
}
